var __extends=this.__extends||
function(f,a){
    for(var e in a){
        if(a.hasOwnProperty(e)){f[e]=a[e]}
    }
    function c(){
        this.constructor=f
    }
    c.prototype=a.prototype;
    f.prototype = new c()
};

var ClassicSnake;

(function (a) {
    var b =
    (function (d) {
        __extends(c, d);
        function c() { d.apply(this, arguments) }
        c.prototype.startGame = function () { };
        c.prototype.turnLeft = function (e) { };
        c.prototype.turnRight = function (e) { };
        return c
    })(Phaser.State);
    a.BaseGameScene = b
})(ClassicSnake || (ClassicSnake = {}));

var ClassicSnake;

(function(a){
    var e=
    (function(){
        function f(g,h){this.x=g;this.y=h}
        f.prototype.equals = function (g) { return (this.x == g.x && this.y == g.y) };
        return f
    })();
    var d=
    (function(f){
        __extends(g,f);
        function g(h,i){
            f.call(this,h,i);
            this.dotSize=20
        }
        g.prototype.getPixel=
        function(){
            return new e((this.x+0.5)*this.dotSize,(this.y+0.5)*this.dotSize)};
        return g
    })(e);
    var b=
    (function(){
        function f(h,i,g){
            this.levelName=h;
            this.gridWidth=i;
            this.gridHeight=g
        }
        f.prototype.getDots=
        function(j){
            var g=this.path.split(",");
            for(var h=0;h<g.length;h++){this.processArg(g[h],j)}};
            f.prototype.processArg=
            function(p,h){
                var k=p.split(" ");
                var n;
                var l;
                switch(k[0]){
                    case"L":
                        n=Number(k[1]);
                        l=Number(k[2]);
                        var g=Number(k[3]);
                        var o=k.indexOf("--right")>=0;
                        if(o){n=this.gridWidth-n-1}
                        var m=k.indexOf("--top")>=0;
                        if(m){
                            l=this.gridHeight-l-1}h.push(new d(n,l));
                            var j;
                            for(j=1;j<g;j++){
                                h.push(new d(o?n-j:n+j,l))
                            }
                            for(j=1;j<g;j++){
                                h.push(new d(n,m?l-j:l+j))
                        }
                    default:break
                }
            };
            return f
    })();
    var c=
    (function(g){
        __extends(f,g);
        function f(){
            g.apply(this,arguments);
            this.body=new Array();
            this.walls=new Array();
            this.arr=new Array();
            this.wallArr=new Array();
            this.navkeys=new Array()
        }
        f.prototype.addNewDot=
        function(k,i){
            var j=k.getPixel();
            var h=this.add.sprite(j.x,j.y,"snakedata",i);
            h.anchor.set(0.5,0.5);
            this.gameGroup.add(h);
            return h
        };
        f.prototype.getSnakeHead=function(){
            return this.arr[this.arr.length-1]};
            f.prototype.initSnake=
            function(j){
                for(var h=0;h<j;h++){this.arr[h]=new d(h,0)}};
                f.prototype.drawSnake=
                function(){
                    var k=this.arr.length;
                    var j;
                    for(var h=0;h<k-1;h++){
                        if(!this.body[h]){
                            this.body[h]=this.addNewDot(this.arr[h],1)
                        }
                    }
                    if(!this.head){this.head=this.addNewDot(this.arr[k-1],0)}
                };
                f.prototype.moveGrid=
                function(h){
                    if(h===void 0){h=false}
                    var i=this.arr.length-1;
                    this.arr.push(Object.create(this.arr[i]));
                    if(!h){
                        this.arr.shift()
                    }
                    else{
                        i++
                    }
                    switch(this.direction){
                        case 0:
                            this.arr[i].x--;
                            if(this.arr[i].x<0){this.arr[i].x+=this.gridX}
                            break;
                        case 1:
                            this.arr[i].y--;
                            if(this.arr[i].y<0){
                                this.arr[i].y+=this.gridY
                            }
                            break;
                        case 2:
                            this.arr[i].x=(this.arr[i].x+1)%this.gridX;
                            break;
                        case 3:
                            this.arr[i].y=(this.arr[i].y+1)%this.gridY;
                            break;
                            default:break
                    }
                };
                f.prototype.moveSnake=
                function(){
                    this.moveGrid();
                    this.feedSnake();
                    if(!this.checkConflict(this.getSnakeHead())){
                        this.game.time.events.remove(this.ticker);
                        this.lose()
                    }
                    var k=this.arr.length;
                    var j;
                    for(var h=0;h<k;h++){
                        j=this.arr[h].getPixel();
                        if(h<k-1){
                            if(!this.body[h]){
                                this.body[h]=this.addNewDot(this.arr[h],1)
                            } 
                            else{
                                this.body[h].x=j.x;
                                this.body[h].y=j.y
                            }
                        }
                        else{
                            this.head.x=j.x;
                            this.head.y=j.y
                        }
                    }
                };
                f.prototype.feedSnake=
                function(){
                    var h=this.arr[this.arr.length-1];
                    if(this.foodDot.equals(h)){
                        this.moveGrid(true);
                        this.putFood();
                        this.initScore()
                    }
                };
                f.prototype.initWall=
                function(){
                    var h=this.game.cache.getJSON("levels");
                    var i=h[0];
                    var j=new b(i.level,this.gridX,this.gridY);
                    j.path=i.path;
                    j.getDots(this.wallArr);
                    this.drawWall()};
                    f.prototype.drawWall=
                    function(){
                        var k=this.wallArr.length;
                        var j;
                        for(var h=0;h<k;h++){
                            if(!this.walls[h]){
                                j=this.wallArr[h].getPixel();
                                this.walls[h]=this.add.sprite(j.x,j.y,"snakedata",3);
                                this.walls[h].anchor.set(0.5,0.5);
                                this.gameGroup.add(this.walls[h])}}};
                                f.prototype.checkConflict=
                                function(j){
                                    for(var h=0;h<this.arr.length-1;h++){
                                        if(this.arr[h].equals(j)){
                                            return false
                                        }
                                    }
                                    for(var h=0;h<this.wallArr.length;h++){
                                        if(this.wallArr[h].equals(j)){
                                            return false
                                        }
                                    }
                                    return true
                                };
                                f.prototype.randomFood=
                                function(){
                                    var h=this.foodDot;
                                    do{
                                        h.x=this.rand.integer()%this.gridX;
                                        h.y=this.rand.integer()%this.gridY
                                    }
                                    while(!this.checkConflict(h))};
                                    f.prototype.putFood=
                                    function(){
                                        if(!this.foodDot){
                                            this.foodDot=new d(0,0)
                                        }
                                        this.randomFood();
                                        var h=this.foodDot.getPixel();
                                        if(!this.food){
                                            this.food=this.add.sprite(0,0,"snakedata",2);
                                            this.food.anchor.set(0.5,0.5);
                                            this.gameGroup.add(this.food)}
                                            this.food.x=h.x;
                                            this.food.y=h.y};
                                            f.prototype.initScore=
                                            function(h){
                                                if(h===void 0){
                                                    h=-1
                                                }
                                                if(h<0){
                                                    this.scoreNum++
                                                }
                                                else{
                                                    this.scoreNum=h
                                                }
                                                this.score.text="Score: "+this.scoreNum.toString()};
                                                f.prototype.createGameGroup=
                                                function(){
                                                    this.gameGroup=this.add.group();
                                                    this.gameGroup.width=this.world.width;
                                                    this.gameGroup.height=this.world.height-60;
                                                    this.initWall();
                                                    this.initSnake(10);
                                                    this.drawSnake();
                                                    this.putFood();
                                                    this.direction=2;
                                                    this.gameTimeCountdown=30;
                                                    this.ticker=this.game.time.events.loop(1000/30,this.moveSnake,this);
                                                    this.countdown=this.game.time.events.repeat(Phaser.Timer.SECOND,this.gameTimeCountdown,this.doCountdown,this);
                                                    this.game.time.events.start();
                                                    console.log(this.gameGroup)};
                                                    f.prototype.createGameUI=
                                                    function(){
                                                        var i=this.add.group();
                                                        i.height=this._dotSize*3;
                                                        i.y=this.world.height-this._dotSize*3;
                                                        var h=this.game.add.graphics(0,0);
                                                        h.beginFill(6323595);
                                                        h.drawRect(0,0,this.world.width,this._dotSize*3);
                                                        h.endFill();
                                                        i.add(h);
                                                        this.score=this.add.text(20,i.height/2,"",{font:"36px HelveticaMedium",fill:"#FFFFFF",align:"left"});
                                                        this.timesLeft=this.add.text(i.width-20,i.height/2,"Times left : "+(this.gameTimeCountdown).toString()+" seconds",{font:"36px HelveticaMedium",fill:"#FFFFFF",align:"right"});
                                                        this.score.anchor.set(0,0.5);
                                                        this.timesLeft.anchor.set(1,0.5);
                                                        this.initScore(0);
                                                        i.add(this.score);
                                                        i.add(this.timesLeft)};
                                                        f.prototype.preload=function(){};
                                                        f.prototype.create=function(){
                                                            var j=this;
                                                            this.rand=new Phaser.RandomDataGenerator([0]);
                                                            this._dotSize=20;
                                                            this.gridX=this.world.width/this._dotSize;
                                                            this.gridY=(this.world.height/this._dotSize)-3;
                                                            this.stage.backgroundColor="#ECEFF1";
                                                            this.createGameGroup();
                                                            this.createGameUI();
                                                            this.navkeys.push(this.game.input.keyboard.addKey(Phaser.Keyboard.RIGHT));
                                                            this.navkeys.push(this.game.input.keyboard.addKey(Phaser.Keyboard.UP));
                                                            this.navkeys.push(this.game.input.keyboard.addKey(Phaser.Keyboard.LEFT));
                                                            this.navkeys.push(this.game.input.keyboard.addKey(Phaser.Keyboard.DOWN));
                                                            for(var h in this.navkeys){
                                                                this.navkeys[h].onDown.add(
                                                                function(i){
                                                                    if(Math.abs(i.keyCode-37-j.direction)!=2){
                                                                        j.direction=i.keyCode-37
                                                                    }
                                                                },this)
                                                            }
                                                        };
                                                        f.prototype.doCountdown=
                                                        function(){
                                                            this.timesLeft.text="Times left : "+(--this.gameTimeCountdown).toString()+" seconds";
                                                            if(this.gameTimeCountdown==0){this.game.time.events.remove(this.countdown);
                                                            this.lose()}};
                                                            f.prototype.lose=
                                                            function(){
                                                                var k=this;
                                                                this.game.time.events.remove(this.ticker);
                                                                this.game.time.events.remove(this.countdown);
                                                                var h=this.game.add.filter("Gray");
                                                                h.gray=0;
                                                                this.gameGroup.filters=[h];
                                                                var i=this.game.add.tween(h).to({gray:1},500,Phaser.Easing.Linear.None);
                                                                if(typeof this.showScore!="undefined"){
                                                                    var j=function(){
                                                                        k.showScore(k.scoreNum)
                                                                    };
                                                                    i.onComplete.add(j,this)}i.start()};
                                                                    f.prototype.doRetry=function(){};
                                                                    f.prototype.doShare=function(){};
                                                                    return f
    })(a.BaseGameScene);
    a.GameScene=c
})(ClassicSnake || (ClassicSnake = {}));

var ClassicSnake;

(function (d) {
    var f = 20;
    var g = false;
    var e;
    (function (i) {
        i[i.HEAD = 1] = "HEAD";
        i[i.BODY = 2] = "BODY";
        i[i.FOOD = 4] = "FOOD";
        i[i.WALL = 8] = "WALL";
        i[i.NEW = 16] = "NEW"
    })(e || (e = {}));
    var a =
    (function () {
        function i(k, j) {
            this.map = null;
            this.mapIndex = 0;
            this.links = new Array();
            if (!k) {
                this.x = 0;
                this.y = 0;
                return
            }
            if (typeof j == "undefined") {
                this.x = k.x;
                this.y = k.y;
                return
            }
            this.x = k.x + i.moveX[j];
            this.y = k.y + i.moveY[j]
        }
        i.prototype.move =
        function (j, l) {
            if (l === void 0) {
                l = false
            }
            var k;
            if (l) {
                k = new i(this, j)
            }
            else {
                k = this;
                k.x += i.moveX[j];
                k.y += i.moveY[j]
            }
            return k
        };
        i.prototype.getDotPixel =
        function () {
            return { x: (this.x + 0.433) * i.dotSize, y: (this.y + 0.5) * i.dotSize }
        };
        i.prototype.touchBound =
        function (k, j, n, m) {
            if (this.x < 0 || this.y < 0) {
                return false
            }
            var l = this.getDotPixel();
            if (l.x > k - n) {
                return false
            }
            if (l.y > j - m) {
                return false
            }
            return true
        };
        i.prototype.equal =
        function (j) {
            return ((this.x == j.x && this.y == j.y))
        };
        i.prototype.assignLabel = function (j) { this.label ^= j };
        i.prototype.getLabelValue =
        function (j) {
            return (this.label & j) == j
        };
        i.moveX = [0.433, 0.866, 0.433, -0.433, -0.866, -0.433];
        i.moveY = [-0.75, 0, 0.75, 0.75, 0, -0.75];
        i.dotSize = 40 * 0.866;
        return i
    })();
    var c =
    (function () {
        function i() {
            this.count = -1;
            this.arr = new Array();
            this.rowPos = new Array()
        }
        i.prototype.add =
        function (m) {
            this.count++;
            m.map = this;
            m.mapIndex = this.count;
            this.arr[this.count] = m;
            var j = Math.round(m.y * 4 / 3);
            if (!this.rowPos[j]) {
                this.rowPos[j] = this.count
            }
            if (this.count == 0) {
                return
            }
            var l;
            if (this.count != this.rowPos[j]) {
                l = this.arr[this.count - 1];
                this.doLink(l, m, 4)
            }
            if (j == 0) { return }
            var k = this.rowPos[j - 1];
            while (this.arr[k].x < m.x - 0.5) {
                k++
            }
            l = this.arr[k];
            if (l.x < m.x) {
                this.doLink(l, m, 5);
                if (k + 1 != this.rowPos[j]) {
                    l = this.arr[k + 1];
                    this.doLink(l, m, 0)
                }
            }
            else {
                this.doLink(l, m, 0)
            }
        };
        i.prototype.find =
        function (k) {
            if (k.x < 0 || k.y < 0) {
                return -1
            }
            var j = this.rowPos[Math.round(k.y * 4 / 3)];
            if (typeof j == "undefined") {
                return -1
            }
            j += (k.x - this.arr[j].x) / 0.866;
            if (j > this.rowPos[k.y * 4 / 3 + 1]) { return -1 } return j
        };
        i.prototype.doLink =
        function (l, k, j) {
            k.links[j] = l;
            l.links[(j + 3) % 6] = k
        };
        i.prototype.matchLabel =
        function (k) {
            var j = new Array();
            $.each(this.arr,
            function (l, m) {
                if (m.getLabelValue(k)) {
                    j.push(m)
                }
            });
            return j
        };
        i.prototype.boundCircleMove =
        function (j, k) {
            k = (k + 3) % 6;
            while (typeof j.links[k] != "undefined") {
                j = j.links[k]
            }
            return j
        };
        return i
    })();
    var b =
    (function (j) {
        __extends(i, j);
        function i(l, k, n) {
            var q = this;
            this.hexaPoint = k;
            this.spriteType = n;
            var o = k.getDotPixel();
            var m = 0;
            switch (n) {
                case "head":
                    m = 0;
                    this.hexaPoint.assignLabel(1);
                    break;
                case "tail":
                    m = 1;
                    this.hexaPoint.assignLabel(2);
                    break;
                case "food":
                    m = 2; this.hexaPoint.assignLabel(4);
                    break;
                case "wall":
                    m = 3;
                    this.hexaPoint.assignLabel(8);
                    break;
                case "bg":
                    m = 4;
                    break
            }
            j.call(this, l, o.x, o.y, "snakehexa", m);
            this.anchor.set(0.5, 0.5);
            l.add.existing(this);
            this.canMove = (m < 3);
            if (g) {
                this.inputEnabled = true;
                this.input.useHandCursor = true;
                this.events.onInputOver.add(function (p) { console.log(q.hexaPoint) }, this)
            }
        }
        i.prototype.moveCompleted =
        function () {
            var k = this.hexaPoint.getDotPixel();
            this.x = k.x;
            this.y = k.y
        };
        i.prototype.move =
        function (m, k) {
            var l = this.hexaPoint.links[m];
            if (typeof l == "undefined") {
                l = this.hexaPoint.map.boundCircleMove(this.hexaPoint, m)
            } this.replace(l, k)
        };
        i.prototype.replace =
        function (k, l) {
            if (l) {
                this.hexaPoint.assignLabel(l);
                k.assignLabel(l)
            }
            this.hexaPoint = k;
            this.moveCompleted()
        };
        return i
    })(Phaser.Sprite);
    var h =
    (function (i) {
        __extends(j, i);
        function j() {
            i.apply(this, arguments);
            this.snake = new Array();
            this.direction = 1;
            this.rand = new Phaser.RandomDataGenerator([0])
        }
        j.prototype.touchPanel =
        function (k, l, m) {
            if (l === void 0) { l = 0 }
            if (m === void 0) { m = 0 }
            return k.touchBound(this.gPw, this.gPh, l, m)
        };
        j.prototype.initBackground =
        function () {
            this.gamePanel = this.add.group();
            this.gamePanel.x = f;
            this.gamePanel.y = f;
            this.gPw = this.world.width - 2 * f;
            this.gPh = this.world.height - 2 * f;
            var n, m;
            var k = 0;
            while (true) {
                if (n == null) {
                    n = new a()
                }
                else {
                    n.move(k % 2 == 0 ? 3 : 2)
                }
                k++;
                m = new a(n);
                if (!this.touchPanel(m)) { break }
                var o = true;
                while (true) {
                    if (!this.touchPanel(m)) { break }
                    var l = new b(this.game, m, "bg");
                    this.hexaMap.add(l.hexaPoint);
                    this.gamePanel.add(l);
                    m = m.move(1, true)
                }
            }
        };
        j.prototype.moveSnake =
        function () {
            var l = this;
            if (this.eatFood) {
                this.eatFood = false;
                var k = new b(this.game, this.snake[0].hexaPoint, "tail");
                k.hexaPoint.assignLabel(16);
                this.gamePanel.add(k);
                this.snake.unshift(k)
            }
            $.each(this.snake, function (m, n) {
                if (n.hexaPoint.getLabelValue(16)) {
                    n.hexaPoint.assignLabel(16)
                }
                else {
                    if (n.spriteType != "head") {
                        n.replace(l.snake[m + 1].hexaPoint, 2)
                    }
                    else {
                        n.move(l.direction, 1);
                        if (n.hexaPoint.getLabelValue(1 | 4)) {
                            l.eatFood = true;
                            l.putFood()
                        }
                        if (n.hexaPoint.getLabelValue(1 | 2)) {
                            l.gameState = "lose"
                        }
                    }
                }
            })
        };
        j.prototype.initSnakes =
        function () {
            var m = 10;
            for (var l = 0; l < m; l++) {
                this.snake[l] = new b(this.game, this.hexaMap.arr[l], (l == m - 1) ? "head" : "tail");
                this.gamePanel.add(this.snake[l])
            }
            var k = this.hexaMap.matchLabel(2);
            console.log(k)
        };
        j.prototype.putFood =
        function () {
            var l = this.hexaMap.count + 1;
            var k;
            do {
                k = this.rand.integer() % l
            }
            while (this.hexaMap.arr[k].getLabelValue(1) || this.hexaMap.arr[k].getLabelValue(2) || this.hexaMap.arr[k].getLabelValue(8));
            this.food.replace(this.hexaMap.arr[k], 4)
        };
        j.prototype.initFood =
        function () {
            this.food = new b(this.game, new a(), "food");
            this.gamePanel.add(this.food);
            this.putFood()
        };
        j.prototype.turnLeft =
        function (k) {
            this.direction--;
            if (this.direction < 0) {
                this.direction += 6
            }
            console.log(this.direction)
        };
        j.prototype.turnRight =
        function (k) {
            this.direction = (this.direction + 1) % 6;
            console.log(this.direction)
        };
        j.prototype.initKeyEvents =
        function () {
            var k = this.game.input.keyboard.addKey(Phaser.Keyboard.RIGHT);
            var l = this.game.input.keyboard.addKey(Phaser.Keyboard.LEFT);
            k.onDown.add(this.turnRight, this);
            l.onDown.add(this.turnLeft, this)
        };
        j.prototype.preload = function () { };
        j.prototype.create =
        function () {
            var k = this.game;
            k.assignCurrentGame(this);
            if (!this.game.device.desktop) {
                a.dotSize = 30 * 0.866
            }
            this.gameState = "begin";
            this.eatFood = false;
            this.direction = 1;
            this.initKeyEvents();
            this.stage.backgroundColor = "#FFFFFF";
            this.hexaMap = new c();
            this.initBackground();
            this.initSnakes();
            this.initFood()
        };
        j.prototype.startGame =
        function () {
            this.ticker = this.game.time.events.loop(1000 / 10, this.moveSnake, this);
            this.game.time.events.start()
        };
        j.prototype.update =
        function () {
            if (this.gameState == "lose") {
                this.game.time.events.remove(this.ticker);
                this.gameState = "over"
            }
        };
        return j
    })(d.BaseGameScene);
    d.HexaGameScene = h
})(ClassicSnake || (ClassicSnake = {}));

var ClassicSnake;

(function (c) {
    var d =
    (function (e) {
        __extends(f, e);
        function f(h, g, i) {
            e.call(this, h, g, Phaser.AUTO, i, null);
            console.log(h, g);
            this.state.add("Boot", b, false);
            this.state.add("Preload", a, false);
            this.state.add("GameScene", c.GameScene, false);
            this.state.add("HexaGameScene", c.HexaGameScene, false)
        }
        f.prototype.assignCurrentGame =
        function (g) {
            console.log("ASSIGN COMPLETED");
            this.currentGameScene = g;
            if (typeof this.assignCurrentGameCompleted != "undefined") {
                this.assignCurrentGameCompleted(this.currentGameScene)
            }
        };
        f.prototype.getCurrentGame =
        function () {
            return this.currentGameScene
        };
        f.prototype.start =
        function () {
            console.log(this);
            this.state.start("Boot")
        };
        return f
    })(Phaser.Game);
    c.Game = d;
    var b = (
    function (f) {
        __extends(e, f);
        function e() {
            f.apply(this, arguments)
        }
        e.prototype.preload = function () { };
        e.prototype.create = function () {
            if (this.game.device.desktop) {
                console.log("YOU ARE PLAYING IN DESKTOP DEVICE")
            }
            else { }
            this.game.state.start("Preload")
        };
        return e
    })(Phaser.State);
    c.Boot = b;
    var a =
    (function (f) {
        __extends(e, f);
        function e() {
            f.apply(this, arguments)
        }
        e.prototype.preload =
        function () {
            this.stage.backgroundColor = "#ECEFF1";
            var h = this.add.text(this.world.centerX, this.world.centerY, "Loading, please wait...", { font: "72px HelveticaLight", fill: "#78909C", align: "center" }); h.anchor.set(0.5, 0.5);
            var g = this.game.load; g.spritesheet("snakedata", "res/image/snake.png", 20, 20);
            if (this.game.device.desktop) {
                g.spritesheet("snakehexa", "res/image/snakehexa.png", 32, 32)
            }
            else {
                g.spritesheet("snakehexa", "res/image/snakehexa24.png", 24, 24)
            }
            g.json("levels", "res/level/level.json");
            g.script("gray", "script/shader/Gray.js");
            g.script("blurx", "script/shader/BlurX.js");
            g.script("blury", "script/shader/BlurY.js")
        };
        e.prototype.create =
        function () {
            this.game.state.start("HexaGameScene")
        };
        return e
    })(Phaser.State);
    c.Preload = a
})(ClassicSnake || (ClassicSnake = {}));